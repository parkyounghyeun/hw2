3장 정리

자유 소프트웨어
복사와 사용, 연구,수정 배포등의 제한이 없는 sw

특징
완전히 무료로 또는 최소환의 금액만을 받고 자유롭게 배포
책임 범위 내에서 재생산,재배포 등의 활동 가능

대표적인 자유 소프트웨어
리눅스,파이어폭스,이맥스,크로미움,크롬,엣지 등등

자유 소프트웨어가 각광받는 이유
소스코드가 공개되어 있어 누구나 자유롭게 사용,복제,수정 재배포가 가능하다
집단지성을 통해 최신 트랜드를 빠르고 유연하게 적용 

오픈소스 라이선스란?
오픈소스 소프트웨어 개발자와 이용자 간에 이용 방법 및 조건 범위를 명시한 계약
자유 소프트웨어와는 다르지만 범위내에서 동일
자유롭게 사용되지만 재배포는 범위내에서 가능

4장
운영체제 프로그램 패키지 저장소
리눅스 : PPA 
윈도우 : choco
프로그램 언어 패키지 저장소
Node.js : npm
Python : PyPI

운영체제 프로그램 패키지 저장소 (1/2)

리눅스
레드헷 계열(Red Hat/CentOS/Fedora)
패키지 설치 파일 확장자 : RPM (*.rpm)
설치 방법 : yum install [패키지 명]
데비안 계열(Mint/Ubuntu/Kali)
패키지 설치 파일 확장자 : dpkg (*.deb)
설치 방법 : apt-get install [패키지 명]

git-> 분산 버전 관리 시스템
git과 다른 vcs 차이점
대부분 vcs가 관리하는 정보는 파일들의 목록, 데이터를 저장하지도 취급하지도 않음
대부분의 명령을 로컬에서 실행, 무결성-파일의 상태 알수 없음
git은 데이터를 추가할 뿐
커밋한 순간 되돌리거나 삭제할 방법이 없음

git 명령어들
git clone <URL>-> 기존 저장소를 복제한다는 의미
git remote add(별칭)(원격 저장소 URL) -> clone은 이 과정 필요x
git status ->  파일의 상태를 확인
git add (파일명)-> 파일을 새로 추가(추적) 할때 사용
git commit -m("커밋내용") -> 명령어를 통해 커밋을 진행
git log -> 커밋 별 히스트리를 확인
git log -p 커밋 별 변동사항 확인
git branch -> 목록 확인
git branch (branch명)->branch생성
git checkout (branch명)-> branch 변명
git checkout -b (branch명)-> branch 생성 및 변경
git merge (병합하고 남길 브런치 명)
git push (별칭)(branch명)

branch? -> 코드 별 버전을 나타내고 병합하기 위한 개념
병렬적인 개발 진행 가능

Fetch
원격 저장소의 변경사항을 가져오나, 로컬 저장소에 반영하지 않음
Pull
원격 저장소의 변경사항을 가져온 뒤, 현재 브랜치에 자동으로 merge
git fetch와 git merge 명령어가 결합된 명령어

파일의 추적 상태 변환
파일 상태 정보
untracked(미추적)
unmodiffied(변경점이 없는 상태)
modiffied(변경점이 생겼으나 미반영 시)
staged(commit 명령으로 반영이 진행 될 파일, untracked, modiffied 상태에서 추가된 파일이 해당 상태)

s
